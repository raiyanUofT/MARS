import h5py
import numpy as np
import os
from pathlib import Path
import torch

# Define paths and subjects
base_folder = '../../../synced_data/woutlier/'
subject_folders = ['subject1', 'subject2', 'subject3', 'subject4']
file_names = [f'radar_data{i}.mat' for i in range(1, 11)]

# Initialize an empty list to hold all features and labels
all_features = []
all_labels = []

def load_and_process_file(file_path, exercise_label):
    """Load a MATLAB v7.3 .mat file and process its frames into feature tensors."""
    with h5py.File(file_path, 'r') as f:
        # Access the dataset (replace 'radar_data_cropped' with the correct key if needed)
        radar_data = np.array(f['radar_data_cropped']).T  # Transpose to align dimensions

    # Extract radar points: X, Y, Z, Doppler, Intensity
    point_cloud_data = radar_data[:, [2, 3, 4, 5, 6]]  # Columns 3-7 in 0-index

    # Get unique frame numbers
    frames = np.unique(radar_data[:, 0])

    for frame_num in frames:
        # Extract points belonging to the current frame
        current_frame_data = point_cloud_data[radar_data[:, 0] == frame_num]

        # Ensure exactly 64 points (pad or truncate)
        num_points = current_frame_data.shape[0]
        if num_points < 64:
            padded_points = np.zeros((64, 5))
            padded_points[:num_points] = current_frame_data
        elif num_points > 64:
            padded_points = current_frame_data[:64]
        else:
            padded_points = current_frame_data

        # Convert to a tensor and add a channel dimension (1, 64, 5)
        feature_tensor = torch.tensor(padded_points, dtype=torch.float32).unsqueeze(0)

        # Store the feature tensor and label
        all_features.append(feature_tensor)
        all_labels.append(exercise_label)

# Loop through subjects and their radar files
for subject in subject_folders:
    subject_path = Path(base_folder) / subject
    num_files = 9 if subject == 'subject4' else 10

    for i in range(num_files):
        file_path = subject_path / file_names[i]
        if file_path.exists():
            print(f"Processing {file_path}...")
            # Example label: each subject gets an exercise label (0-indexed)
            load_and_process_file(file_path, exercise_label=i % 10)

# Convert the list of features and labels into tensors
all_features = torch.stack(all_features)  # Shape: (num_frames, 1, 64, 5)
all_labels = torch.tensor(all_labels, dtype=torch.long)  # Shape: (num_frames,)

# Print the total number of frames
num_frames = all_features.shape[0]
print(f"Total number of frames: {num_frames}")

# Save the features and labels
torch.save(all_features, 'all_features.pt')
torch.save(all_labels, 'all_labels.pt')

print(f"Feature extraction complete. Saved {num_frames} frames.")
print(f"Feature tensor shape: {all_features.shape}, Label tensor shape: {all_labels.shape}")


######################################
# Output of the above code snippet:

# Processing ../../../synced_data/woutlier/subject1/radar_data1.mat...
# Processing ../../../synced_data/woutlier/subject1/radar_data2.mat...
# Processing ../../../synced_data/woutlier/subject1/radar_data3.mat...
# Processing ../../../synced_data/woutlier/subject1/radar_data4.mat...
# Processing ../../../synced_data/woutlier/subject1/radar_data5.mat...
# Processing ../../../synced_data/woutlier/subject1/radar_data6.mat...
# Processing ../../../synced_data/woutlier/subject1/radar_data7.mat...
# Processing ../../../synced_data/woutlier/subject1/radar_data8.mat...
# Processing ../../../synced_data/woutlier/subject1/radar_data9.mat...
# Processing ../../../synced_data/woutlier/subject1/radar_data10.mat...
# Processing ../../../synced_data/woutlier/subject2/radar_data1.mat...
# Processing ../../../synced_data/woutlier/subject2/radar_data2.mat...
# Processing ../../../synced_data/woutlier/subject2/radar_data3.mat...
# Processing ../../../synced_data/woutlier/subject2/radar_data4.mat...
# Processing ../../../synced_data/woutlier/subject2/radar_data5.mat...
# Processing ../../../synced_data/woutlier/subject2/radar_data6.mat...
# Processing ../../../synced_data/woutlier/subject2/radar_data7.mat...
# Processing ../../../synced_data/woutlier/subject2/radar_data8.mat...
# Processing ../../../synced_data/woutlier/subject2/radar_data9.mat...
# Processing ../../../synced_data/woutlier/subject2/radar_data10.mat...
# Processing ../../../synced_data/woutlier/subject3/radar_data1.mat...
# Processing ../../../synced_data/woutlier/subject3/radar_data2.mat...
# Processing ../../../synced_data/woutlier/subject3/radar_data3.mat...
# Processing ../../../synced_data/woutlier/subject3/radar_data4.mat...
# Processing ../../../synced_data/woutlier/subject3/radar_data5.mat...
# Processing ../../../synced_data/woutlier/subject3/radar_data6.mat...
# Processing ../../../synced_data/woutlier/subject3/radar_data7.mat...
# Processing ../../../synced_data/woutlier/subject3/radar_data8.mat...
# Processing ../../../synced_data/woutlier/subject3/radar_data9.mat...
# Processing ../../../synced_data/woutlier/subject3/radar_data10.mat...
# Processing ../../../synced_data/woutlier/subject4/radar_data1.mat...
# Processing ../../../synced_data/woutlier/subject4/radar_data2.mat...
# Processing ../../../synced_data/woutlier/subject4/radar_data3.mat...
# Processing ../../../synced_data/woutlier/subject4/radar_data4.mat...
# Processing ../../../synced_data/woutlier/subject4/radar_data5.mat...
# Processing ../../../synced_data/woutlier/subject4/radar_data6.mat...
# Processing ../../../synced_data/woutlier/subject4/radar_data7.mat...
# Processing ../../../synced_data/woutlier/subject4/radar_data8.mat...
# Processing ../../../synced_data/woutlier/subject4/radar_data9.mat...
# Total number of frames: 40083
# Feature extraction complete. Saved 40083 frames.
# Feature tensor shape: torch.Size([40083, 1, 64, 5]), Label tensor shape: torch.Size([40083])

######################################